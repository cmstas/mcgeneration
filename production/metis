#!/usr/bin/env python2
# -*- coding: utf-8 -*
import argparse
import time
import os
from subprocess import Popen, PIPE
from metis.CondorTask import CondorTask
from metis.StatsParser import StatsParser
from metis.Utils import good_sites
from metis.Sample import DummySample

formatter = lambda prog: argparse.ArgumentDefaultsHelpFormatter(prog, width=120, max_help_position=40)

cli = argparse.ArgumentParser(
    description="Submit NanoAOD-skimming condor jobs", 
    formatter_class=formatter
)
cli.add_argument(
    "--debug", action="store_true",
    help="run in debug mode"
)
cli.add_argument(
    "-t", "--tag", type=str, required=True, default=argparse.SUPPRESS,
    help="unique tag for identifying output from these jobs"
)
cli.add_argument(
    "--name", type=str, default="SignalGeneration",
    help="name for signal generation"
)
cli.add_argument(
    "-g", "--gridpack", type=str, required=True, default=argparse.SUPPRESS,
    help="full path to gridpack tarball, e.g. /path/to/gridpack.tar.gz"
)
cli.add_argument(
    "-c", "--campaign", type=str, required=True, default=argparse.SUPPRESS,
    help="reconstruction campaign to generate"
)
cli.add_argument(
    "--nevents", type=int, default=100,
    help="number of events to generate per job"
)
cli.add_argument(
    "--njobs", type=int, default=1,
    help="number of jobs to run"
)
cli.add_argument(
    "--sites", type=str, nargs="*", default=list(good_sites),
    help="space-separated list of T2 sites"
)
cli.add_argument(
    "--n_monit_hrs", type=int, default=48,
    help="number of hours to run Metis for"
)
args = cli.parse_args()

if not os.path.isfile(args.gridpack):
    print("ERROR: {} does not exist!".format(args.gridpack))
    exit()

# Delete old package
package = "{}.tar.gz".format(args.campaign)
if os.path.isfile(package):
    os.remove(package)
# Make new package
tarball = Popen(["sh", "mkpkg", args.campaign], stdout=PIPE, stderr=PIPE)
exit_code = tarball.wait()
if exit_code != 0:
    print("ERROR: sh mkpkg {} failed".format(args.campaign))
    exit()
# Check that is was made
if not os.path.isfile(package):
    print("ERROR: {} does not exist!".format(package))
    exit()

# Assemble condor_submit parameters
condor_submit_params = {
    "sites": ",".join(args.sites), 
    "classads": [
        ["param_nevents", args.nevents],
        ["param_campaign", args.campaign],
        ["metis_extraargs", ""],
        ["JobBatchName", "{}_{}".format(args.name, args.campaign)]
    ],
    "requirements_line": "Requirements = (HAS_SINGULARITY=?=True)"
}

dataset_name = "_".join(args.gridpack.split("/")[-1].split("_")[:3])
dataset="/{0}_TuneCP5/{1}-106X_privateMC/NANOGEN".format(dataset_name, args.campaign)

total_summary = {}
n_updates = args.n_monit_hrs*2 if args.n_monit_hrs > 0 else 1
for _ in range(n_updates): # update every 30 mins
    # Collect tasks
    task = CondorTask(
        sample = DummySample(dataset=dataset, N=args.njobs, nevents=args.nevents),
        files_per_output=1,
        output_name="output.root",
        tag=args.tag,
        condor_submit_params=condor_submit_params,
        input_executable="scripts/condor_executable_metis.sh", # your condor executable here
        tarfile=package, # your tarfile with assorted goodies here
        special_dir="{0}/{1}".format(args.name, args.tag), # output files into /ceph/cms/store/<user>/<special_dir>
        arguments=args.gridpack
    )
    # Set task summary
    if not task.complete():
        task.process()
    total_summary[task.get_sample().get_datasetname()] = task.get_task_summary()
    if args.debug or args.n_monit_hrs == 0:
        break
    # Update monitoring GUI
    StatsParser(data=total_summary, webdir="~/public_html/{}_metis".format(args.name.lower())).do()
    # Wait 30 minutes
    time.sleep(30*60)
